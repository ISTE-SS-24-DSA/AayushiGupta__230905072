//not executable 
 
 
 int searchInSorted(int arr[], int N, int K)
    {
      int low=0;
      int high=N-1;

    while(low<=high)
    {int mid=(low+high)/2;
        if(arr[mid]<K)
        {
            low=mid+1;

        }
        else if(arr[mid]>K)
        high=mid-1;

        else return 1;
    }

    return -1;
      }


      bool check(vector<int>& arr1, vector<int>& arr2) {

        map<int,int>mp;
        int c=0;

        for(auto it:arr1)
{ mp[it]++;}
        for(auto it:arr2)
        {mp[it]++;}

        for(auto it:mp)
        {
            if((it.second%2)!=0)
            {return false;

            }

        }


          return true;

    }

      int findFloor(const std::vector<long long>& v, long long n, long long x) {
    if (v[0] > x) {
        return -1;
    }

    // Find the largest element <= x using binary search
    int low = 0;
    int high = v.size() - 1;
    int ans = -1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (v[mid] <= x) {
            ans = mid;  // Update the answer to the current index
            low = mid + 1;  // Look on the right side for a potentially larger floor
        } else {
            high = mid - 1;  // Look on the left side
        }
    }

    return ans;
}};

 int getPairsCount(const vector<int>& arr, int k) {
        // code here
       std::unordered_map<int, int> mp;
    int pairCount = 0;

    for (const auto& it : arr) {
        int complement = k - it;

        // Check if the complement exists in the map
        if (mp.find(complement) != mp.end()) {
            pairCount += mp[complement];
        }

        // Add the current element to the map
        mp[it]++;
    }

    return pairCount;
    }
